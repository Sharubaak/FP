const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;

// In-memory user store
const users = new Map(); // Using a Map to store users in memory

passport.use(new GoogleStrategy({
    clientID: process.env.GOOGLE_CLIENT_ID,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    callbackURL: process.env.GOOGLE_CALLBACK_URL // Ensure this matches your Google Developer Console
  },
  function(accessToken, refreshToken, profile, cb) {
    let user = users.get(profile.id);

    if (!user) {
      // User is logging in for the first time
      user = {
        id: profile.id,
        displayName: profile.displayName,
        emails: profile.emails,
        photos: profile.photos
      };

      users.set(profile.id, user); // Store user in memory
    }

    return cb(null, user); // Pass the user object to the callback
  }
));

// Serialize user into session
passport.serializeUser((user, cb) => {
  cb(null, user.id); // Serialize only the user ID
});

// Deserialize user from session
passport.deserializeUser((id, cb) => {
  const user = users.get(id);
  if (user) {
    cb(null, user); // Pass the user object to the request
  } else {
    cb(new Error('User not found'));
  }
});
